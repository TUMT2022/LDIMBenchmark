name: ldimbenchmark Release

on: 
  workflow_dispatch:
  push:
    branches: [main]

env:
  poetry_version: 1.2.2

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: release
    env:
      python-version: '3.10'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - name: cache poetry install
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: python-${{ env.python-version }}-poetry-${{ env.poetry_version }}-0

      - uses: snok/install-poetry@v1
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        with:
          version: ${{ env.poetry_version }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: cache deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: python-${{ env.python-version }}-pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Semantic Release
        id: semantic-release
        run: |
          echo "::set-output name=version::$(poetry run semantic-release print-version)"
          echo "{version}={$(poetry run semantic-release print-version)}" >> $GITHUB_OUTPUT
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # outputs:
        #   matrix: ${{ steps.semantic-release.outputs.version }}

      - run: echo ${{ steps.semantic-release.outputs.version }}
      # Trigger pypi cache once so the docker build does not fail.
      - run: pip install ldimbenchmark==${{ steps.semantic-release.outputs.version }} || true

      - name: Log in to the Container registry
        if: "!contains(steps.semantic-release.outputs.version, 'No release')"
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: "!contains(steps.semantic-release.outputs.version, 'No release')"
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ghcr.io/ldimbenchmark/ldimbenchmark

      - name: Build and push Docker image
        if: "!contains(steps.semantic-release.outputs.version, 'No release')"
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ghcr.io/ldimbenchmark/ldimbenchmark:${{ steps.semantic-release.outputs.version }} , ghcr.io/ldimbenchmark/ldimbenchmark:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.semantic-release.outputs.version }}

      - name: Trigger new methods Release
        if: "!contains(steps.semantic-release.outputs.version, 'No release')"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHA_WORKFLOW_TRIGGER }}
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: 'ldimbenchmark',
              repo: 'methods',
              workflow_id: 'main.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.semantic-release.outputs.version }}'
              },
            })
            console.log(result)
  
